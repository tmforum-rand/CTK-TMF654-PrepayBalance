{"info":{"_postman_id":"59080ef9-fb4e-47cd-b69f-128b3ada1b16","name":"CTK-PrepayBalance-4.0.0","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"N1","item":[{"name":"/Bucket","event":[{"listen":"test","script":{"id":"089d23e3-8fdc-49bb-bdf8-e7a11aefdb89","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","","pm.globals.set('HREFBU01', instance['href']);","pm.globals.set('IDBU01', instance['id']);","pm.globals.set('STATUSBU01', instance['status']);","pm.globals.set('USAGETYPEBU01', instance['usageType']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on status', function () {","  pm.expect(pm.response.text()).to.include(instance['status']);","});","pm.test('Body includes value held on usageType', function () {","  pm.expect(pm.response.text()).to.include(instance['usageType']);","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"usageType\": \"monetary\"\n}"},"url":{"raw":"{{PrepayBalance}}bucket","host":["{{PrepayBalance}}bucket"]},"description":"This operation creates a Bucket"},"response":[]},{"name":"/Bucket","event":[{"listen":"test","script":{"id":"7d6a78cc-5d10-41af-844a-9585d8e98b86","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU02');});","            pm.test('id is ' + pm.globals.get(\"IDBU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU02');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU02');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU02\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU02');});","            pm.test('id is ' + pm.globals.get(\"IDBU02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU02');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU02');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU02\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket","host":["{{PrepayBalance}}bucket"]},"description":"This operation search for the created Bucket"},"response":[]},{"name":"/Bucket/{{IDBU01}}","event":[{"listen":"test","script":{"id":"dacb14bb-a032-42fd-8b22-fa3c678ee4b2","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket/{{IDBU01}}","host":["{{PrepayBalance}}bucket"],"path":["{{IDBU01}}"]},"description":"This operation search for one of the created Bucket"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N2","item":[{"name":"/Bucket?fields=href","event":[{"listen":"test","script":{"id":"b813edb3-ad60-4671-ac17-fc7fd2da359d","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?fields=href","host":["{{PrepayBalance}}bucket"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?fields=id","event":[{"listen":"test","script":{"id":"0db29494-a407-4991-a150-faceba651071","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?fields=id","host":["{{PrepayBalance}}bucket"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?id={{IDBU01}}","event":[{"listen":"test","script":{"id":"9f92ab2e-f029-4a36-9fb6-60e8c1e46a96","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?id={{IDBU01}}","host":["{{PrepayBalance}}bucket"],"query":[{"key":"id","value":"{{IDBU01}}"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?fields=status","event":[{"listen":"test","script":{"id":"0684c100-3969-40c7-87ad-1e29dbe9ef7d","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?fields=status","host":["{{PrepayBalance}}bucket"],"query":[{"key":"fields","value":"status"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?status={{STATUSBU01}}","event":[{"listen":"test","script":{"id":"42d18d3b-4bc8-477b-a2eb-50362553c9be","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?status={{STATUSBU01}}","host":["{{PrepayBalance}}bucket"],"query":[{"key":"status","value":"{{STATUSBU01}}"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?fields=usageType","event":[{"listen":"test","script":{"id":"4cf62692-2268-4ea7-95bc-057bdfa35289","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?fields=usageType","host":["{{PrepayBalance}}bucket"],"query":[{"key":"fields","value":"usageType"}]},"description":"This operation filter a Bucket"},"response":[]},{"name":"/Bucket?usageType={{USAGETYPEBU01}}","event":[{"listen":"test","script":{"id":"41a28ff0-b879-4388-923d-f818dad9b8d9","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['confirmationDate', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has confirmationDate attribute', function() { pm.expect(instance[\"confirmationDate\"]).to.be.a('string'); });","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDBU01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFBU01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFBU01');});","            pm.test('id is ' + pm.globals.get(\"IDBU01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDBU01');});","            pm.test('status is ' + pm.globals.get(\"STATUSBU01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSBU01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEBU01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEBU01');});","        }","        if (instance.id == pm.globals.get(\"IDBU02\")) {","            pm.test('IDBU02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket?usageType={{USAGETYPEBU01}}","host":["{{PrepayBalance}}bucket"],"query":[{"key":"usageType","value":"{{USAGETYPEBU01}}"}]},"description":"This operation filter a Bucket"},"response":[]}],"protocolProfileBehavior":{}},{"name":"E1","item":[{"name":"/Bucket/404ID","event":[{"listen":"test","script":{"id":"cfb37659-f80b-474e-a90f-5cafc7d9e021","exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}bucket/7c3981c5-5f8c-4800-a1b3-19cfcd3a44da","host":["{{PrepayBalance}}bucket"],"path":["7c3981c5-5f8c-4800-a1b3-19cfcd3a44da"]},"description":"This operation search for one of the created Bucket"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N1","item":[{"name":"/TopupBalance","event":[{"listen":"test","script":{"id":"0308ca37-4e1d-47e8-bde9-472df5da6655","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['amount', 'href', 'id', 'status'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","","pm.globals.set('HREFTB01', instance['href']);","pm.globals.set('IDTB01', instance['id']);","pm.globals.set('STATUSTB01', instance['status']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on status', function () {","  pm.expect(pm.response.text()).to.include(instance['status']);","});","","","var Ajv = require('ajv'),","ajv = new Ajv({logger: console}),","schema = {","    \"$schema\": \"http://json-schema.org/schema#\",","    \"type\": \"object\",","    \"anyOf\": [","        {","            \"properties\": {","                \"amount\": {","                    \"type\": \"object\",","                    \"properties\": {","                        \"amount\": {","                            \"type\": \"integer\"","                        },","                        \"units\": {","                            \"type\": \"string\"","                        }","                    },","                    \"required\": [","                        \"amount\",","                        \"units\"","                    ]","                },","                \"bucket\": {","                    \"type\": \"object\",","                    \"properties\": {","                        \"id\": {","                            \"type\": \"string\"","                        }","                    },","                    \"required\": [","                        \"id\"","                    ]","                }","            },","            \"required\": [\"bucket\"]","        },","        {","            \"properties\": {","                \"amount\": {","                    \"type\": \"object\",","                    \"properties\": {","                        \"amount\": {","                            \"type\": \"integer\"","                        },","                        \"units\": {","                            \"type\": \"string\"","                        }","                    },","                    \"required\": [","                        \"amount\",","                        \"units\"","                    ]","                },","                \"product\": {","                    \"type\": \"array\",","                    \"items\": {","                        \"type\": \"object\",","                        \"properties\": {","                            \"id\": {","                                \"type\": \"string\"","                            }","                        },","                        \"required\": [","                            \"id\"","                        ]","                    }","                }","            },","            \"required\": [\"product\"]","        },","        {","            \"properties\": {","                \"amount\": {","                    \"type\": \"object\",","                    \"properties\": {","                        \"amount\": {","                            \"type\": \"integer\"","                        },","                        \"units\": {","                            \"type\": \"string\"","                        }","                    },","                    \"required\": [","                        \"amount\",","                        \"units\"","                    ]","                },","                \"logicalResource\": {","                    \"type\": \"array\",","                    \"items\": {","                        \"type\": \"object\",","                        \"properties\": {","                            \"id\": {","                                \"type\": \"string\"","                            }","                        },","                        \"required\": [","                            \"id\"","                        ]","                    }","                }","            },","            \"required\": [\"logicalResource\"]","        }","    ],","    \"required\": [","        \"amount\"","    ]","};","","pm.test('Schema is valid', function() {","    pm.response.json();","    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"amount\": {\n    \"amount\": 50,\n    \"units\": \"EUR\"\n  },\n  \"bucket\": {\n    \"id\": \"11\",\n    \"href\": \"/prepayBalanceManagement/v4/bucket/11\"\n  }\n}"},"url":{"raw":"{{PrepayBalance}}topupBalance","host":["{{PrepayBalance}}topupBalance"]},"description":"This operation creates a TopupBalance"},"response":[]},{"name":"/TopupBalance","event":[{"listen":"test","script":{"id":"e68511e4-f8bc-4a65-9c8e-f45fd3448179","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB02');});","            pm.test('id is ' + pm.globals.get(\"IDTB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB02');});","            pm.test('id is ' + pm.globals.get(\"IDTB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance","host":["{{PrepayBalance}}topupBalance"]},"description":"This operation search for the created TopupBalance"},"response":[]},{"name":"/TopupBalance/{{IDTB01}}","event":[{"listen":"test","script":{"id":"083cfeda-4ef8-4806-ad5c-c2bffd013c18","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance/{{IDTB01}}","host":["{{PrepayBalance}}topupBalance"],"path":["{{IDTB01}}"]},"description":"This operation search for one of the created TopupBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N2","item":[{"name":"/TopupBalance?fields=href","event":[{"listen":"test","script":{"id":"87dde924-d484-4bd3-ac44-1ad97f89b60a","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance?fields=href","host":["{{PrepayBalance}}topupBalance"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a TopupBalance"},"response":[]},{"name":"/TopupBalance?fields=id","event":[{"listen":"test","script":{"id":"dd774cce-08cb-495b-9711-dca327c7d1b7","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance?fields=id","host":["{{PrepayBalance}}topupBalance"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a TopupBalance"},"response":[]},{"name":"/TopupBalance?id={{IDTB01}}","event":[{"listen":"test","script":{"id":"13bb7e17-b5d0-4872-a267-355ab0df6e4e","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance?id={{IDTB01}}","host":["{{PrepayBalance}}topupBalance"],"query":[{"key":"id","value":"{{IDTB01}}"}]},"description":"This operation filter a TopupBalance"},"response":[]},{"name":"/TopupBalance?fields=status","event":[{"listen":"test","script":{"id":"2bef4914-6555-4d76-9924-6881ab1f786b","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance?fields=status","host":["{{PrepayBalance}}topupBalance"],"query":[{"key":"fields","value":"status"}]},"description":"This operation filter a TopupBalance"},"response":[]},{"name":"/TopupBalance?status={{STATUSTB01}}","event":[{"listen":"test","script":{"id":"09113ba3-2768-47af-8513-108eb8704e5b","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDTB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFTB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFTB01');});","            pm.test('id is ' + pm.globals.get(\"IDTB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDTB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSTB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSTB01');});","        }","        if (instance.id == pm.globals.get(\"IDTB02\")) {","            pm.test('IDTB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance?status={{STATUSTB01}}","host":["{{PrepayBalance}}topupBalance"],"query":[{"key":"status","value":"{{STATUSTB01}}"}]},"description":"This operation filter a TopupBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"E1","item":[{"name":"/TopupBalance/404ID","event":[{"listen":"test","script":{"id":"f4c8e2e7-e77d-4ebf-9833-375c60411413","exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}topupBalance/81801f99-bb0b-4f6a-ac5b-905f96e7f6d7","host":["{{PrepayBalance}}topupBalance"],"path":["81801f99-bb0b-4f6a-ac5b-905f96e7f6d7"]},"description":"This operation search for one of the created TopupBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N1","item":[{"name":"/AdjustBalance","event":[{"listen":"test","script":{"id":"73fa3aa5-27ea-427f-bb84-30ec38d41ea0","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) { ","  ","    pm.test('Array not expected as response', function (){pm.expect.fail()});","  ","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","","pm.globals.set('HREFAB01', instance['href']);","pm.globals.set('IDAB01', instance['id']);","pm.globals.set('STATUSAB01', instance['status']);","pm.globals.set('USAGETYPEAB01', instance['usageType']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on status', function () {","  pm.expect(pm.response.text()).to.include(instance['status']);","});","pm.test('Body includes value held on usageType', function () {","  pm.expect(pm.response.text()).to.include(instance['usageType']);","});","","","","var Ajv = require('ajv'),","ajv = new Ajv({logger: console}),","schema = {","    \"$schema\": \"http://json-schema.org/schema#\",","    \"type\": \"object\",","    \"anyOf\": [","        {","            \"properties\": {","                \"bucket\": {","                    \"type\": \"object\",","                    \"properties\": {","                        \"id\": {","                            \"type\": \"string\"","                        }","                    },","                    \"required\": [","                        \"id\"","                    ]","                }","            },","            \"required\": [\"bucket\"]","        },","        {","            \"properties\": {","                \"product\": {","                    \"type\": \"array\",","                    \"items\": {","                        \"type\": \"object\",","                        \"properties\": {","                            \"id\": {","                                \"type\": \"string\"","                            }","                        },","                        \"required\": [","                            \"id\"","                        ]","                    }","                }","            },","            \"required\": [\"product\"]","        },","        {","            \"properties\": {","                \"logicalResource\": {","                    \"type\": \"array\",","                    \"items\": {","                        \"type\": \"object\",","                        \"properties\": {","                            \"id\": {","                                \"type\": \"string\"","                            }","                        },","                        \"required\": [","                            \"id\"","                        ]","                    }","                }","            },","            \"required\": [\"logicalResource\"]","        }","    ],","    \"required\": [\"amount\", \"usageType\"]","};","","pm.test('Schema is valid', function() {","    pm.response.json();","    pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;","});","",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"amount\": {\n    \"amount\": 50,\n    \"units\": \"EUR\"\n  },\n  \"usageType\": \"monetary\",\n  \"product\": {\n    \"id\": \"d3ba9b4b-781a-42a7-9976-12fb826f6b99\"\n  },\n  \"bucket\": {\n    \"id\": \"11\",\n    \"href\": \"/prepayBalanceManagement/v4/bucket/11\"\n  }\n}"},"url":{"raw":"{{PrepayBalance}}adjustBalance","host":["{{PrepayBalance}}adjustBalance"]},"description":"This operation creates a AdjustBalance"},"response":[]},{"name":"/AdjustBalance","event":[{"listen":"test","script":{"id":"b1940ab8-dd9a-46eb-981c-b346eecff8ff","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB02');});","            pm.test('id is ' + pm.globals.get(\"IDAB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB02');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB02\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB02');});","            pm.test('id is ' + pm.globals.get(\"IDAB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB02');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB02\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance","host":["{{PrepayBalance}}adjustBalance"]},"description":"This operation search for the created AdjustBalance"},"response":[]},{"name":"/AdjustBalance/{{IDAB01}}","event":[{"listen":"test","script":{"id":"bdd67fe4-deaf-4818-85aa-175e363ed8a3","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance/{{IDAB01}}","host":["{{PrepayBalance}}adjustBalance"],"path":["{{IDAB01}}"]},"description":"This operation search for one of the created AdjustBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N2","item":[{"name":"/AdjustBalance?fields=href","event":[{"listen":"test","script":{"id":"e7323663-3ec9-4c88-8d4c-6cfa12923f96","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?fields=href","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?fields=id","event":[{"listen":"test","script":{"id":"71d68ceb-058f-4f5c-aaa0-c3f66a3729d4","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?fields=id","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?id={{IDAB01}}","event":[{"listen":"test","script":{"id":"e82ff5f4-d77b-4f89-b9d9-a581ea9fc023","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?id={{IDAB01}}","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"id","value":"{{IDAB01}}"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?fields=status","event":[{"listen":"test","script":{"id":"26a7e09d-f2bb-445f-8973-a29749da11e9","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?fields=status","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"fields","value":"status"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?status={{STATUSAB01}}","event":[{"listen":"test","script":{"id":"ee32e8d0-2071-42e8-a736-48294c267914","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?status={{STATUSAB01}}","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"status","value":"{{STATUSAB01}}"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?fields=usageType","event":[{"listen":"test","script":{"id":"8396a869-aa93-46ff-ad6c-c40b32f4068c","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?fields=usageType","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"fields","value":"usageType"}]},"description":"This operation filter a AdjustBalance"},"response":[]},{"name":"/AdjustBalance?usageType={{USAGETYPEAB01}}","event":[{"listen":"test","script":{"id":"c92f9911-be22-45bf-890c-9e8fc9d2daea","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'status', 'usageType'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","        pm.test('Response has usageType attribute', function() { pm.expect(instance[\"usageType\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        pm.test('Body includes value held on usageType', function () {","            pm.expect(pm.response.text()).to.include(instance['usageType']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDAB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFAB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFAB01');});","            pm.test('id is ' + pm.globals.get(\"IDAB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDAB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSAB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSAB01');});","            pm.test('usageType is ' + pm.globals.get(\"USAGETYPEAB01\"), function() {pm.expect(instance['usageType']) == pm.globals.get('USAGETYPEAB01');});","        }","        if (instance.id == pm.globals.get(\"IDAB02\")) {","            pm.test('IDAB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance?usageType={{USAGETYPEAB01}}","host":["{{PrepayBalance}}adjustBalance"],"query":[{"key":"usageType","value":"{{USAGETYPEAB01}}"}]},"description":"This operation filter a AdjustBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"E1","item":[{"name":"/AdjustBalance/404ID","event":[{"listen":"test","script":{"id":"3cf0e4e2-4050-476b-a81d-bf0b4717c206","exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}adjustBalance/0696ce92-bbd9-4b90-96c7-03d13ee1fb04","host":["{{PrepayBalance}}adjustBalance"],"path":["0696ce92-bbd9-4b90-96c7-03d13ee1fb04"]},"description":"This operation search for one of the created AdjustBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N1","item":[{"name":"/ReserveBalance","event":[{"listen":"test","script":{"id":"43134f47-cb4b-4c02-99f4-f8dbec54cd7f","exec":["var jsonData = pm.response.json();","","if (Array.isArray(jsonData)) {","","  pm.test('Array not expected as response', function () { pm.expect.fail() });","","","}","","pm.test(\"Status code is 201\", function () {","  pm.response.to.have.status(201);","});","","var instance = pm.response.json();","var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","","pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","","","","pm.test('Response has href attribute', function () { pm.expect(instance[\"href\"]).to.be.a('string'); });","pm.test('Response has id attribute', function () { pm.expect(instance[\"id\"]).to.be.a('string'); });","pm.test('Response has relatedParty attribute', function () { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","pm.test('Response has status attribute', function () { pm.expect(instance[\"status\"]).to.be.a('string'); });","","pm.globals.set('HREFRB01', instance['href']);","pm.globals.set('IDRB01', instance['id']);","pm.globals.set('STATUSRB01', instance['status']);","","pm.test('Body includes value held on href', function () {","  pm.expect(pm.response.text()).to.include(instance['href']);","});","pm.test('Body includes value held on id', function () {","  pm.expect(pm.response.text()).to.include(instance['id']);","});","pm.test('Body includes value held on status', function () {","  pm.expect(pm.response.text()).to.include(instance['status']);","});","","","","","var Ajv = require('ajv'),","  ajv = new Ajv({ logger: console }),","  schema = {","    \"$schema\": \"http://json-schema.org/schema#\",","    \"type\": \"object\",","    \"anyOf\": [","      {","        \"properties\": {","          \"bucket\": {","            \"type\": \"object\",","            \"properties\": {","              \"id\": {","                \"type\": \"string\"","              }","            },","            \"required\": [","              \"id\"","            ]","          }","        },","        \"required\": [\"bucket\"]","      },","      {","        \"properties\": {","          \"product\": {","            \"type\": \"array\",","            \"items\": {","              \"type\": \"object\",","              \"properties\": {","                \"id\": {","                  \"type\": \"string\"","                }","              },","              \"required\": [","                \"id\"","              ]","            }","          }","        },","        \"required\": [\"product\"]","      },","      {","        \"properties\": {","          \"logicalResource\": {","            \"type\": \"array\",","            \"items\": {","              \"type\": \"object\",","              \"properties\": {","                \"id\": {","                  \"type\": \"string\"","                }","              },","              \"required\": [","                \"id\"","              ]","            }","          }","        },","        \"required\": [\"logicalResource\"]","      }","    ]","  };","","pm.test('Schema is valid', function () {","  pm.response.json();","  pm.expect(ajv.validate(schema, pm.response.json())).to.be.true;","});",""],"type":"text/javascript"}}],"request":{"method":"POST","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"body":{"mode":"raw","raw":"{\n  \"amount\": {\n    \"amount\": 50,\n    \"units\": \"EUR\"\n  },\n  \"relatedParty\": [\n    {\n      \"id\": \"5\",\n      \"href\": \"/partyManagement/customer/22\",\n      \"name\": \"jerry wilson\",\n      \"role\": \"customer\",\n      \"@referredType\": \"Individual\"\n    }\n  ],\n  \"bucket\": {\n    \"id\": \"11\",\n    \"href\": \"/prepayBalanceManagement/v4/bucket/11\"\n  }\n}"},"url":{"raw":"{{PrepayBalance}}reserveBalance","host":["{{PrepayBalance}}reserveBalance"]},"description":"This operation creates a ReserveBalance"},"response":[]},{"name":"/ReserveBalance","event":[{"listen":"test","script":{"id":"b7a4d576-e515-4e7f-8beb-afe6e6844ad0","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB02');});","            pm.test('id is ' + pm.globals.get(\"IDRB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB02');});","        }  ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB02');});","            pm.test('id is ' + pm.globals.get(\"IDRB02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB02');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB02\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB02');});","        }","   ","  }","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance","host":["{{PrepayBalance}}reserveBalance"]},"description":"This operation search for the created ReserveBalance"},"response":[]},{"name":"/ReserveBalance/{{IDRB01}}","event":[{"listen":"test","script":{"id":"137861ab-90f1-4908-95bc-b3dfe2807264","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance/{{IDRB01}}","host":["{{PrepayBalance}}reserveBalance"],"path":["{{IDRB01}}"]},"description":"This operation search for one of the created ReserveBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"N2","item":[{"name":"/ReserveBalance?fields=href","event":[{"listen":"test","script":{"id":"cd8b74bb-f878-4e68-8c79-bfec3ba1e25c","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance?fields=href","host":["{{PrepayBalance}}reserveBalance"],"query":[{"key":"fields","value":"href"}]},"description":"This operation filter a ReserveBalance"},"response":[]},{"name":"/ReserveBalance?fields=id","event":[{"listen":"test","script":{"id":"972ba681-7bd3-421b-8e30-f3523acf4fad","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance?fields=id","host":["{{PrepayBalance}}reserveBalance"],"query":[{"key":"fields","value":"id"}]},"description":"This operation filter a ReserveBalance"},"response":[]},{"name":"/ReserveBalance?id={{IDRB01}}","event":[{"listen":"test","script":{"id":"c2106f59-f3f8-4743-89f7-6b608048e42a","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance?id={{IDRB01}}","host":["{{PrepayBalance}}reserveBalance"],"query":[{"key":"id","value":"{{IDRB01}}"}]},"description":"This operation filter a ReserveBalance"},"response":[]},{"name":"/ReserveBalance?fields=status","event":[{"listen":"test","script":{"id":"de5e381a-50ab-460b-ae6d-859f5279a50c","exec":[""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance?fields=status","host":["{{PrepayBalance}}reserveBalance"],"query":[{"key":"fields","value":"status"}]},"description":"This operation filter a ReserveBalance"},"response":[]},{"name":"/ReserveBalance?status={{STATUSRB01}}","event":[{"listen":"test","script":{"id":"adf429f9-53db-48dd-900e-5360be88a5d7","exec":["pm.test(\"Status code is 200\", function () {","    pm.response.to.have.status(200);","});","  ","  ","  ","var jsonData = pm.response.json();","  ","if (Array.isArray(jsonData) && (jsonData.length > 0)) {","    jsonData.forEach(function (instance, index) {","      ","        var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","          ","    });","  }","  else {","    var instance = pm.response.json();","    var requiredAttributes = ['amount', 'href', 'id', 'relatedParty', 'status'];","      ","        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });","      ","      ","      ","        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });","        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });","        pm.test('Response has relatedParty attribute', function() { pm.expect(instance[\"relatedParty\"]).to.be.a('array'); });","        pm.test('Response has status attribute', function() { pm.expect(instance[\"status\"]).to.be.a('string'); });","      ","        pm.test('Body includes value held on href', function () {","            pm.expect(pm.response.text()).to.include(instance['href']);","        });","        pm.test('Body includes value held on id', function () {","            pm.expect(pm.response.text()).to.include(instance['id']);","        });","        pm.test('Body includes value held on status', function () {","            pm.expect(pm.response.text()).to.include(instance['status']);","        });","        // Individualized tests","        if (instance.id == pm.globals.get(\"IDRB01\")) {","            pm.test('href is ' + pm.globals.get(\"HREFRB01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRB01');});","            pm.test('id is ' + pm.globals.get(\"IDRB01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRB01');});","            pm.test('status is ' + pm.globals.get(\"STATUSRB01\"), function() {pm.expect(instance['status']) == pm.globals.get('STATUSRB01');});","        }","        if (instance.id == pm.globals.get(\"IDRB02\")) {","            pm.test('IDRB02 not expected on this test', function () {","                console.log(\"Non expected resource, may happen if there is a collision on attributes\")","            });","        }","","        ","   ","}","  ","  "],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance?status={{STATUSRB01}}","host":["{{PrepayBalance}}reserveBalance"],"query":[{"key":"status","value":"{{STATUSRB01}}"}]},"description":"This operation filter a ReserveBalance"},"response":[]}],"protocolProfileBehavior":{}},{"name":"E1","item":[{"name":"/ReserveBalance/404ID","event":[{"listen":"test","script":{"id":"6d44c951-c950-4c7d-acb5-dec428f416e5","exec":["pm.test(\"Status code is 404\", function () {","    pm.response.to.have.status(404);","});","",""],"type":"text/javascript"}}],"request":{"method":"GET","header":[{"key":"Accept","value":"application/json"},{"key":"Content-Type","value":"application/json"}],"url":{"raw":"{{PrepayBalance}}reserveBalance/1771243b-a4a1-4019-ba13-8a773d8dfddc","host":["{{PrepayBalance}}reserveBalance"],"path":["1771243b-a4a1-4019-ba13-8a773d8dfddc"]},"description":"This operation search for one of the created ReserveBalance"},"response":[]}],"protocolProfileBehavior":{}}],"protocolProfileBehavior":{}}